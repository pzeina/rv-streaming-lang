"""
This type stub file was generated by pyright.
"""

from geopy.geocoders.base import Geocoder

"""
:class:`.YahooPlaceFinder` geocoder.
"""
requests_missing = ...
__all__ = ("YahooPlaceFinder", )
class YahooPlaceFinder(Geocoder):
    """
    Geocoder that utilizes the Yahoo! BOSS PlaceFinder API. Documentation at:
        https://developer.yahoo.com/boss/geo/docs/
    """
    def __init__(self, consumer_key, consumer_secret, timeout=..., proxies=..., user_agent=...) -> None:
        """
        :param str consumer_key: Key provided by Yahoo.

        :param str consumer_secret: Secret corresponding to the key
            provided by Yahoo.

        :param int timeout: Time, in seconds, to wait for the geocoding service
            to respond before raising a :class:`geopy.exc.GeocoderTimedOut`
            exception.

        :param dict proxies: If specified, routes this geocoder"s requests
            through the specified proxy. E.g., {"https": "192.0.2.0"}. For
            more information, see documentation on
            :class:`urllib2.ProxyHandler`.

            .. versionadded:: 0.96

        :param str user_agent: Use a custom User-Agent header.

            .. versionadded:: 1.12.0
        """
        ...
    
    @staticmethod
    def humanize(location): # -> LiteralString:
        """
        Returns a human readable representation of a raw PlaceFinder location
        """
        ...
    
    def geocode(self, query, exactly_one=..., timeout=..., min_quality=..., reverse=..., valid_country_codes=..., with_timezone=...): # -> list[Any] | None:
        """
        Geocode a location query.

        :param str query: The address or query you wish to geocode.

        :param bool exactly_one: Return one result or a list of results, if
            available.

        :param int min_quality:

        :param bool reverse:

        :param valid_country_codes:
        :type valid_country_codes: list or tuple

        :param bool with_timezone: Include the timezone in the response's
            `raw` dictionary (as `timezone`).
        """
        ...
    
    def reverse(self, query, exactly_one=..., timeout=...): # -> list[Any] | None:
        """
        Returns a reverse geocoded location using Yahoo"s PlaceFinder API.

        :param query: The coordinates for which you wish to obtain the
            closest human-readable addresses.
        :type query: :class:`geopy.point.Point`, list or tuple of (latitude,
            longitude), or string as "%(latitude)s, %(longitude)s"

        :param bool exactly_one: Return one result or a list of results, if
            available.
        """
        ...
    


