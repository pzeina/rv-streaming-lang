"""
This type stub file was generated by pyright.
"""

import watchdog
import watchdog.events
import logicsponge.core as ls
from collections.abc import Callable, Hashable, Iterable
from pathlib import Path
from typing import Any
from watchdog.observers.api import BaseObserver

"""Sources for logicsponge."""
logger = ...
class FileWatchHandler(watchdog.events.FileSystemEventHandler):
    """Watches a file for changes."""
    file_path: Path
    encoding: str
    source: FileWatchSource
    def __init__(self, file_path: str, source: FileWatchSource, encoding: str = ...) -> None:
        """Create a FileWatchHandler object."""
        ...
    
    def read_file(self) -> None:
        """Read the file."""
        ...
    
    def on_modified(self, event: watchdog.events.FileSystemEvent) -> None:
        """Call if file was modified."""
        ...
    


class FileWatchSource(ls.SourceTerm):
    """Source that watches a file for changes."""
    observer: BaseObserver
    handler: FileWatchHandler
    def __init__(self, file_path: str, *args, encoding: str = ..., **kwargs) -> None:
        """Create a FileWatchSource object."""
        ...
    
    def enter(self) -> None:
        """Enter the source."""
        ...
    
    def exit(self) -> None:
        """Exit the source."""
        ...
    
    def run(self) -> None:
        """Execute the source's run."""
        ...
    


class CSVStreamer(ls.SourceTerm):
    """Stream a csv file."""
    file_path: str
    poll_delay: float
    position: int
    def __init__(self, *args, file_path: str, poll_delay: float = ..., **kwargs) -> None:
        """Create a CSVStreamer object."""
        ...
    
    def run(self) -> None:
        """Execute the run."""
        ...
    


class GoogleDriveSource(ls.SourceTerm):
    """Stream a Google drive url."""
    poll_interval_sec: int
    google_drive_link: str | None
    local_filename: Path
    def __init__(self, google_drive_link: str, *args, **kwargs) -> None:
        """Create a GoogleDriveSource object."""
        ...
    
    def download(self) -> None:
        """Download the file."""
        ...
    
    def run(self) -> None:
        """Execute the run."""
        ...
    


class StringDiff(ls.FunctionTerm):
    """Compute the diff of strings."""
    old_string: str
    def __init__(self, *args, **kwargs) -> None:
        """Create a StringDiff object."""
        ...
    
    def f(self, data: ls.DataItem) -> ls.DataItem:
        """Execute on new data."""
        ...
    


class LineSplitter(ls.FunctionTerm):
    """Split into lines."""
    def f(self, data: ls.DataItem) -> None:
        """Execute on new data."""
        ...
    


class LineParser(ls.FunctionTerm):
    """Parse lines."""
    comment: str
    delimiter: str
    has_header: bool
    header: list[str] | None
    def __init__(self, *args, **kwargs) -> None:
        """Create a LineParser object."""
        ...
    
    def f(self, data: ls.DataItem) -> ls.DataItem | None:
        """Execute on new data."""
        ...
    


class IterableSource(ls.SourceTerm):
    """Stream an Iterable like a list, tuple, etc."""
    _iterable: Iterable
    _formatter: Callable[[Any], dict[str, Hashable]]
    @staticmethod
    def formatter_default(item: Any) -> dict[str, Hashable]:
        """Format an item per default."""
        ...
    
    def __init__(self, iterable: Iterable = ..., name: str | None = ..., formatter: Callable[[Any], dict[str, Hashable]] = ..., **kwargs) -> None:
        """Create an IterableSource.

        Arguments:
            iterable (Iterable, optional): The Iterable, over which the source will iterate and stream
                to its output.
                By default, the items are expected to be dicts with keys as str.
                If not, use the formatter keyword.
            name (str | None, optional): The name of the Term.
            formatter (Callable[[Any], dict[str, Hashable]], optional): A function that is called on each item
                of the iterable and that is expected to return a dict with keys as strings.
                By the fault the identity is used as the formatter.
            **kwargs: Remaining kwargs.

        """
        ...
    
    def run(self) -> None:
        """Execute the run."""
        ...
    


