"""
This type stub file was generated by pyright.
"""

import numpy as np
import logicsponge.core as ls
from typing import Any

"""Statistics for logcisponge."""
class BaseStatistic(ls.FunctionTerm):
    """Base class to handle common functionality for base statistics."""
    dim: int
    stat_name: str
    state: ls.State
    def __init__(self, *args, dim: int = ..., **kwargs) -> None:
        """Create an instance."""
        ...
    
    def calculate(self, *args, **kwargs) -> Any:
        """Calculate the statistics."""
        ...
    
    def f(self, di: ls.DataItem) -> ls.DataItem:
        """Collect data and calculate the statistics."""
        ...
    


class Sum(ls.FunctionTerm):
    """Computes cumulative sum of `key` over data items."""
    def __init__(self, *args, key: str, **kwargs) -> None:
        """Create an instance."""
        ...
    
    def f(self, item: ls.DataItem) -> ls.DataItem:
        """Run on new data."""
        ...
    


class Mean(BaseStatistic):
    """Computes mean per data item."""
    def __init__(self, *args, **kwargs) -> None:
        """Create an instance."""
        ...
    
    def calculate(self, values: np.ndarray) -> float:
        """Perform the calculation of the statistics."""
        ...
    


class Std(BaseStatistic):
    """Computes standard deviation per data item."""
    def __init__(self, *args, **kwargs) -> None:
        """Create an instance."""
        ...
    
    def calculate(self, values: np.ndarray) -> float:
        """Perform the calculation of the statistics."""
        ...
    


class StdHull(BaseStatistic):
    """Computes mean, lower bound, and upper bound per data item with configurable standard deviation factor.

    dim:
        0: statistics over time per key
        1: statistics over keys per time-point
    """
    factor: float
    def __init__(self, *args, factor: float = ..., **kwargs) -> None:
        """Create an instance."""
        ...
    
    def calculate(self, values: np.ndarray) -> dict[str, Any]:
        """Perform the calculation of the statistics."""
        ...
    


class TestStatistic(ls.FunctionTerm):
    """Base class to handle common functionality for test statistics."""
    arity: int | None
    dim: int
    stat_name: str
    state: ls.State
    def __init__(self, *args, dim: int = ..., **kwargs) -> None:
        """Create an instance."""
        ...
    
    def calculate(self, *args, **kwargs) -> Any:
        """Perform the calculation of the statistics."""
        ...
    
    def f(self, di: ls.DataItem) -> ls.DataItem:
        """Collect data and calculate the statistics."""
        ...
    


class OneSampleTTest(TestStatistic):
    """Performs a t-Test."""
    def __init__(self, *args, mean: float = ..., **kwargs) -> None:
        """Create an instance."""
        ...
    
    def calculate(self, values: np.ndarray) -> dict[str, Any]:
        """Perform the calculation of the statistics."""
        ...
    


class PairedTTest(TestStatistic):
    """Performs paired t-Test."""
    def __init__(self, *args, **kwargs) -> None:
        """Create an instance."""
        ...
    
    def calculate(self, series1: np.ndarray, series2: np.ndarray) -> dict[str, Any]:
        """Perform the calculation of the statistics."""
        ...
    


class KruskalWallis(TestStatistic):
    """Performs Kruskal-Wallis-Test."""
    def __init__(self, *args, **kwargs) -> None:
        """Create an instance."""
        ...
    
    def calculate(self, *series: np.ndarray) -> dict[str, Any]:
        """Perform the calculation of the statistics."""
        ...
    


