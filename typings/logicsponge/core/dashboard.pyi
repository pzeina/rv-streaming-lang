"""
This type stub file was generated by pyright.
"""

import uuid
import numpy as np
import logicsponge.core as ls
from collections.abc import Callable
from typing import Any, Self, TypedDict
from dash import dcc, html
from dash.dependencies import Input, Output

logger = ...
class PlotParams(TypedDict):
    """Parameters of a plot."""
    x: list[float]
    y: list[float]
    args: list
    kwargs: dict
    ...


class Line(TypedDict):
    """Parameters of a line."""
    x: list[float]
    y: list[float]
    label: str
    style: dict[str, Any]
    ...


def hex_to_rgb(hex_color: str) -> tuple[int, int, int]:
    """Convert hex to rgb."""
    ...

class Graph:
    """A graph in the dashboard."""
    lines: list[Line]
    name: str
    uuid: str
    shapes: list[dict[str, Any]]
    stacked: bool
    log_y: bool
    range_y: list[float] | None
    def __init__(self, name: str, stacked: bool = ..., log_y: bool = ..., range_y: list[float] | None = ...) -> None:
        """Create a Graph object.

        Args:
            name (str): The name.
            stacked (bool): If plotted lines are stacked as subgraphs instead of being plotted as overlays.
            log_y (bool): If y-axis is log.
            range_y (list[float], optional): The range of the y-axis.

        """
        ...
    
    def clear(self) -> None:
        """Clear the plot."""
        ...
    
    def add_line(self, x: list[float], y: list[float], label: str | None = ..., style: dict[str, Any] | None = ...) -> None:
        """Add a line to the plot."""
        ...
    
    def get_line(self, label: str) -> Line | None:
        """Get a line of the plot."""
        ...
    
    def append_to_line(self, label: str, x: float | None, y: float) -> None:
        """Append x,y to a line."""
        ...
    
    def to_dcc_graph(self) -> dcc.Graph:
        """Get a navigable graph as a dcc.Graph object."""
        ...
    


class StatisticsGraph:
    """Graph with performance statistics."""
    circuit: ls.Term
    def __init__(self, circuit: ls.Term) -> None:
        """Create a StatisticsGraph object."""
        ...
    
    @staticmethod
    def dfs(term: ls.Term, result: list[ls.Term]) -> None:
        """Run dfs on a Term and add to result list."""
        ...
    
    @property
    def term_list(self) -> list[ls.Term]:
        """Return a list of Terms."""
        ...
    
    @property
    def stats_dict(self) -> dict:
        """Return a dict with statistics."""
        ...
    


external_scripts: list[str | dict[str, Any]] | None = ...
app = ...
graphs: list[Graph] = ...
statistics_graph: StatisticsGraph | None = ...
lock = ...
SIDEBAR_STYLE = ...
CONTENT_STYLE = ...
sidebar = ...
content = ...
page_graphs = ...
page_stats = ...
page_latencies = ...
def register_graph(graph: Graph) -> None:
    """Register a new graph."""
    ...

@app.callback(Output("page-content", "children"), [Input("url", "pathname")])
def render_page_content(pathname: str) -> html.Div:
    """Call to render the page content."""
    ...

@app.callback(Output("graphs-container", "children"), [Input("interval-graphs", "n_intervals")])
def update_graphs(n: int) -> list[html.Div]:
    """Call to update the layout with all graphs."""
    ...

@app.callback(Output("latencies-container", "children"), [Input("interval-latencies", "n_intervals")])
def update_latencies(n: int) -> html.Div:
    """Call to update the latencies."""
    ...

@app.callback(Output("stats-data", "data"), [Input("interval-stats", "n_intervals")])
def update_stats(n: int) -> dict:
    """Call to update statistics."""
    ...

class Plot(ls.FunctionTerm):
    """Plot data items as they arrive.

    Typical uses are:
    - Plot(x='a', y=['b', 'c'])
    - Plot(x='a', y='b')
    - Plot(y='b') : plot over round number
    - Plot() : plot all keys over round number
    """
    x_name: str
    y_names: list[str] | None
    graph: Graph | None
    stacked: bool
    style: dict[str, Any]
    log_y: bool
    range_y: list[float] | None
    def __init__(self, *args, x: str = ..., y: str | list[str] | None = ..., stacked: bool = ..., style: dict[str, Any] | None = ..., log_y: bool = ..., range_y: list[float] | None = ..., **kwargs) -> None:
        """Create a new Plot object."""
        ...
    
    def add_data(self, item: ls.DataItem) -> None:
        """Happening on adding new data."""
        ...
    
    def f(self, item: ls.DataItem) -> ls.DataItem:
        """Add the new data."""
        ...
    


class BinaryPlot(Plot):
    """Plots a monitored binary signal."""
    x_name: str
    y_names: list[str] | None
    graph: Graph | None
    def __init__(self, *args, **kwargs) -> None:
        """Create a BinaryPlot object."""
        ...
    
    def f(self, item: ls.DataItem) -> ls.DataItem:
        """Execute on new data."""
        ...
    


class DeepPlot(ls.FunctionTerm):
    """A DeepPlot is used to plot a complete graph."""
    then_fun: Callable[[Self, ls.DataItem], None] | None
    graph: Graph
    def __init__(self, *args, **kwargs) -> None:
        """Create a DeepPlot object."""
        ...
    
    def plot_line(self, params: PlotParams) -> None:
        """Plot a line."""
        ...
    
    def f(self, item: ls.DataItem) -> ls.DataItem:
        """Run the plotting."""
        ...
    
    def then(self, fun: Callable[[Self, ls.DataItem], None]) -> Self:
        """Run a function after plotting."""
        ...
    


def is_finite(num: float | np.number) -> bool:
    """Return if a number is finite."""
    ...

def show_stats(circuit: ls.Term) -> None:
    """Show statistics in the dashboard."""
    ...

def run(debug: bool = ...) -> None:
    """Run the dashboard app."""
    ...

